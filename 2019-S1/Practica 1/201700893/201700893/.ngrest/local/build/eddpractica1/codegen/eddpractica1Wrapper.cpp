// This file generated by ngrestcg
// For more information, please visit: https://github.com/loentar/ngrest
// DO NOT EDIT. ANY CHANGES WILL BE LOST

#include <ngrest/utils/Log.h>
#include <ngrest/utils/fromcstring.h>
#include <ngrest/utils/tostring.h>
#include <ngrest/utils/Exception.h>
#include <ngrest/common/ObjectModel.h>
#include <ngrest/common/ObjectModelUtils.h>
#include <ngrest/common/Message.h>
#include <ngrest/common/HttpMethod.h>
#include <ngrest/common/Service.h>
#include <ngrest/engine/ServiceDescription.h>
#include "eddpractica1Wrapper.h"





eddpractica1Wrapper::eddpractica1Wrapper():
    service(new eddpractica1())
{
}

eddpractica1Wrapper::~eddpractica1Wrapper()
{
    delete service;
}


::ngrest::Service* eddpractica1Wrapper::getServiceImpl()
{
    return service;
}

void eddpractica1Wrapper::invoke(const ::ngrest::OperationDescription* operation, ::ngrest::MessageContext* context)
{
    if (operation->name == "crearUsuario") {   //  **************** crearUsuario *****************

        /// std::string crearUsuario(const Usuario& userx);

/// ######### deserialize request ###########
        NGREST_ASSERT(context->request->node, "Request expected for eddpractica1/crearUsuario");
        NGREST_ASSERT_PARAM(context->request->node->type == ::ngrest::NodeType::Object);

        const ::ngrest::Object* request = static_cast<const ::ngrest::Object*>(context->request->node);

        ::Usuario userx;

        const ::ngrest::NamedNode* userxObj = ::ngrest::ObjectModelUtils::getNamedChild(request, "userx", ::ngrest::NodeType::Object);
        ::UsuarioSerializer::deserialize(userxObj->node, userx);
/// ######### deserialize request end ###########

        const std::string& result = service->crearUsuario(userx);

/// ######### serialize response ###########

        ::ngrest::Object* responseNode = context->pool->alloc< ::ngrest::Object>();
        ::ngrest::NamedNode* resultNode = context->pool->alloc< ::ngrest::NamedNode>("result");
        responseNode->firstChild = resultNode;

        resultNode->node = context->pool->alloc< ::ngrest::Value>(::ngrest::ValueType::String, result.c_str());

        context->response->node = responseNode;
/// ######### serialize response end ###########

        context->callback->success();
    } else if (operation->name == "getUsuarios") {   //  **************** getUsuarios *****************

        /// std::list< ::Usuario > getUsuarios();

        const std::list< ::Usuario >& result = service->getUsuarios();

/// ######### serialize response ###########

        ::ngrest::Object* responseNode = context->pool->alloc< ::ngrest::Object>();
        ::ngrest::NamedNode* resultNode = context->pool->alloc< ::ngrest::NamedNode>("result");
        responseNode->firstChild = resultNode;

// count = 1
        ::ngrest::Array* resultArray = context->pool->alloc< ::ngrest::Array>();
        resultNode->node = resultArray;
        ::ngrest::LinkedNode* lastResultArrayItem = nullptr;
        for (const auto& it : result) {
            ::ngrest::LinkedNode* resultArrayItem = context->pool->alloc< ::ngrest::LinkedNode>();
            if (lastResultArrayItem == nullptr) {
                resultArray->firstChild = resultArrayItem;
            } else {
                lastResultArrayItem->nextSibling = resultArrayItem;
            }
            lastResultArrayItem = resultArrayItem;
        // SERIALIZE : ::Usuario struct
            resultArrayItem->node = context->pool->alloc< ::ngrest::Object>();
            ::UsuarioSerializer::serialize(context, it, resultArrayItem->node);
        // END SERIALIZE: ::Usuario struct
        }

        context->response->node = responseNode;
/// ######### serialize response end ###########

        context->callback->success();
    } else if (operation->name == "crearRecurso") {   //  **************** crearRecurso *****************

        /// std::string crearRecurso(const Recurso& resource);

/// ######### deserialize request ###########
        NGREST_ASSERT(context->request->node, "Request expected for eddpractica1/crearRecurso");
        NGREST_ASSERT_PARAM(context->request->node->type == ::ngrest::NodeType::Object);

        const ::ngrest::Object* request = static_cast<const ::ngrest::Object*>(context->request->node);

        ::Recurso resource;

        const ::ngrest::NamedNode* resourceObj = ::ngrest::ObjectModelUtils::getNamedChild(request, "resource", ::ngrest::NodeType::Object);
        ::RecursoSerializer::deserialize(resourceObj->node, resource);
/// ######### deserialize request end ###########

        const std::string& result = service->crearRecurso(resource);

/// ######### serialize response ###########

        ::ngrest::Object* responseNode = context->pool->alloc< ::ngrest::Object>();
        ::ngrest::NamedNode* resultNode = context->pool->alloc< ::ngrest::NamedNode>("result");
        responseNode->firstChild = resultNode;

        resultNode->node = context->pool->alloc< ::ngrest::Value>(::ngrest::ValueType::String, result.c_str());

        context->response->node = responseNode;
/// ######### serialize response end ###########

        context->callback->success();
    } else if (operation->name == "getRecurso") {   //  **************** getRecurso *****************

        /// std::list< ::Recurso > getRecurso();

        const std::list< ::Recurso >& result = service->getRecurso();

/// ######### serialize response ###########

        ::ngrest::Object* responseNode = context->pool->alloc< ::ngrest::Object>();
        ::ngrest::NamedNode* resultNode = context->pool->alloc< ::ngrest::NamedNode>("result");
        responseNode->firstChild = resultNode;

// count = 1
        ::ngrest::Array* resultArray = context->pool->alloc< ::ngrest::Array>();
        resultNode->node = resultArray;
        ::ngrest::LinkedNode* lastResultArrayItem = nullptr;
        for (const auto& it : result) {
            ::ngrest::LinkedNode* resultArrayItem = context->pool->alloc< ::ngrest::LinkedNode>();
            if (lastResultArrayItem == nullptr) {
                resultArray->firstChild = resultArrayItem;
            } else {
                lastResultArrayItem->nextSibling = resultArrayItem;
            }
            lastResultArrayItem = resultArrayItem;
        // SERIALIZE : ::Recurso struct
            resultArrayItem->node = context->pool->alloc< ::ngrest::Object>();
            ::RecursoSerializer::serialize(context, it, resultArrayItem->node);
        // END SERIALIZE: ::Recurso struct
        }

        context->response->node = responseNode;
/// ######### serialize response end ###########

        context->callback->success();
    } else if (operation->name == "getServicio") {   //  **************** getServicio *****************

        /// std::list< ::Servicio > getServicio();

        const std::list< ::Servicio >& result = service->getServicio();

/// ######### serialize response ###########

        ::ngrest::Object* responseNode = context->pool->alloc< ::ngrest::Object>();
        ::ngrest::NamedNode* resultNode = context->pool->alloc< ::ngrest::NamedNode>("result");
        responseNode->firstChild = resultNode;

// count = 1
        ::ngrest::Array* resultArray = context->pool->alloc< ::ngrest::Array>();
        resultNode->node = resultArray;
        ::ngrest::LinkedNode* lastResultArrayItem = nullptr;
        for (const auto& it : result) {
            ::ngrest::LinkedNode* resultArrayItem = context->pool->alloc< ::ngrest::LinkedNode>();
            if (lastResultArrayItem == nullptr) {
                resultArray->firstChild = resultArrayItem;
            } else {
                lastResultArrayItem->nextSibling = resultArrayItem;
            }
            lastResultArrayItem = resultArrayItem;
        // SERIALIZE : ::Servicio struct
            resultArrayItem->node = context->pool->alloc< ::ngrest::Object>();
            ::ServicioSerializer::serialize(context, it, resultArrayItem->node);
        // END SERIALIZE: ::Servicio struct
        }

        context->response->node = responseNode;
/// ######### serialize response end ###########

        context->callback->success();
    } else if (operation->name == "crearServicioUsuario") {   //  **************** crearServicioUsuario *****************

        /// std::string crearServicioUsuario(std::string userx);

/// ######### deserialize request ###########
        NGREST_ASSERT(context->request->node, "Request expected for eddpractica1/crearServicioUsuario");
        NGREST_ASSERT_PARAM(context->request->node->type == ::ngrest::NodeType::Object);

        const ::ngrest::Object* request = static_cast<const ::ngrest::Object*>(context->request->node);

        std::string userx;

        ::ngrest::ObjectModelUtils::getChildValue(request, "userx", userx);
/// ######### deserialize request end ###########

        const std::string& result = service->crearServicioUsuario(userx);

/// ######### serialize response ###########

        ::ngrest::Object* responseNode = context->pool->alloc< ::ngrest::Object>();
        ::ngrest::NamedNode* resultNode = context->pool->alloc< ::ngrest::NamedNode>("result");
        responseNode->firstChild = resultNode;

        resultNode->node = context->pool->alloc< ::ngrest::Value>(::ngrest::ValueType::String, result.c_str());

        context->response->node = responseNode;
/// ######### serialize response end ###########

        context->callback->success();
    } else {
        NGREST_THROW_ASSERT("No operation " + operation->name + " found in service eddpractica1");
    }
}

const ::ngrest::ServiceDescription* eddpractica1Wrapper::getDescription() const
{
    static ::ngrest::ServiceDescription description = {
        "eddpractica1", // name
        "eddpractica1", // location
        R"(Dummy description for the service)", // description
        R"(Some detailed description of the service)", // details
        {
            {
                "crearUsuario",             // name
                "/newUsuario", // location
                static_cast<int>(::ngrest::HttpMethod::POST),
                "POST",
                false,
                R"()", // description
                R"()", // details
                {
                    {"userx", ::ngrest::ParameterDescription::Type::Object, false}
                },
                ::ngrest::ParameterDescription::Type::String, false
            },
            {
                "getUsuarios",             // name
                "/getUsuarios", // location
                static_cast<int>(::ngrest::HttpMethod::GET),
                "GET",
                false,
                R"()", // description
                R"()", // details
                {

                },
                ::ngrest::ParameterDescription::Type::Array, false
            },
            {
                "crearRecurso",             // name
                "/newRecurso", // location
                static_cast<int>(::ngrest::HttpMethod::POST),
                "POST",
                false,
                R"()", // description
                R"()", // details
                {
                    {"resource", ::ngrest::ParameterDescription::Type::Object, false}
                },
                ::ngrest::ParameterDescription::Type::String, false
            },
            {
                "getRecurso",             // name
                "/getRecurso", // location
                static_cast<int>(::ngrest::HttpMethod::GET),
                "GET",
                false,
                R"()", // description
                R"()", // details
                {

                },
                ::ngrest::ParameterDescription::Type::Array, false
            },
            {
                "getServicio",             // name
                "/getServicio", // location
                static_cast<int>(::ngrest::HttpMethod::GET),
                "GET",
                false,
                R"()", // description
                R"()", // details
                {

                },
                ::ngrest::ParameterDescription::Type::Array, false
            },
            {
                "crearServicioUsuario",             // name
                "/getRecurso/id_usuario", // location
                static_cast<int>(::ngrest::HttpMethod::GET),
                "GET",
                false,
                R"()", // description
                R"()", // details
                {
                    {"userx", ::ngrest::ParameterDescription::Type::String, false}
                },
                ::ngrest::ParameterDescription::Type::String, false
            }
        }
    };

    return &description;
}



