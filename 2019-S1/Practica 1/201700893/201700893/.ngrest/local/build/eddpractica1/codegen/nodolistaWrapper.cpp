// This file generated by ngrestcg
// For more information, please visit: https://github.com/loentar/ngrest
// DO NOT EDIT. ANY CHANGES WILL BE LOST

#include <ngrest/utils/Log.h>
#include <ngrest/utils/fromcstring.h>
#include <ngrest/utils/tostring.h>
#include <ngrest/utils/Exception.h>
#include <ngrest/common/ObjectModel.h>
#include <ngrest/common/ObjectModelUtils.h>
#include <ngrest/common/Message.h>
#include "NodoListaWrapper.h"



// struct Usuario

void ::UsuarioSerializer::serialize(::ngrest::MessageContext* context, const Usuario& value, ::ngrest::Node* node)
{
    ::ngrest::NamedNode* oldFirstChildNode = static_cast< ::ngrest::Object*>(node)->firstChild;
    ::ngrest::NamedNode* idNode = context->pool->alloc< ::ngrest::NamedNode>("id");
    static_cast< ::ngrest::Object*>(node)->firstChild = idNode;
// SERIALIZE : std::string string
    idNode->node = context->pool->alloc< ::ngrest::Value>(::ngrest::ValueType::String, value.id.c_str());
// END SERIALIZE: std::string string
    ::ngrest::NamedNode* nombreNode = context->pool->alloc< ::ngrest::NamedNode>("nombre");
    idNode->nextSibling = nombreNode;
// SERIALIZE : std::string string
    nombreNode->node = context->pool->alloc< ::ngrest::Value>(::ngrest::ValueType::String, value.nombre.c_str());
// END SERIALIZE: std::string string
    ::ngrest::NamedNode* correoNode = context->pool->alloc< ::ngrest::NamedNode>("correo");
    nombreNode->nextSibling = correoNode;
// SERIALIZE : std::string string
    correoNode->node = context->pool->alloc< ::ngrest::Value>(::ngrest::ValueType::String, value.correo.c_str());
// END SERIALIZE: std::string string
    ::ngrest::NamedNode* fechaNode = context->pool->alloc< ::ngrest::NamedNode>("fecha");
    correoNode->nextSibling = fechaNode;
// SERIALIZE : std::string string
    fechaNode->node = context->pool->alloc< ::ngrest::Value>(::ngrest::ValueType::String, value.fecha.c_str());
// END SERIALIZE: std::string string
    fechaNode->nextSibling = oldFirstChildNode;
}

void ::UsuarioSerializer::deserialize(const ::ngrest::Node* node, Usuario& value)
{
    NGREST_ASSERT(node->type == ::ngrest::NodeType::Object, "Unexpected node type while deserializing ::Usuario");
    const ::ngrest::Object* object = static_cast<const ::ngrest::Object*>(node);
    ::ngrest::ObjectModelUtils::getChildValue(object, "id", value.id);
    ::ngrest::ObjectModelUtils::getChildValue(object, "nombre", value.nombre);
    ::ngrest::ObjectModelUtils::getChildValue(object, "correo", value.correo);
    ::ngrest::ObjectModelUtils::getChildValue(object, "fecha", value.fecha);
}





