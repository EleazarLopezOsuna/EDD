// This file generated by ngrestcg
// For more information, please visit: https://github.com/loentar/ngrest

#include "eddpractica1.h"
#include <list>
#include <string.h>
#include <stdlib.h>

ListaUsuario ul;
ColaRecurso cr;
PilaServicio ps;
int contadorUsuarios = 0;
int contadorRecurso = 0;

static const char pool[] = 
	"ABCDEFGHIJKLMNOPQRSTUVWXYZ"
	"abcdefghijklmnopqrstuvwxyz"
	"0123456789";
int poolSize = sizeof(pool) - 1;

std::string getRandomChar(){
	std::string cadena = "";
	for (int i = 0; i < 10; ++i)
	{
		char a = pool[rand() % poolSize];
		cadena += a;
	}
	return cadena;
}

std::string eddpractica1::crearUsuario(const Usuario& userx){
    std::string resultado;
    NodoRecurso* primero = cr.primero;
    return ul.insertarUsuario(userx, contadorRecurso, primero);
}

std::list<Usuario>eddpractica1::getUsuarios(){
	return ul.linealizar();
}

std::string eddpractica1::crearRecurso(const Recurso& resource){
	std::string resultado;
	cr.insertarRecurso(resource);
	resultado = "Recurso ingresado";
	contadorRecurso++;
	return resultado;
}

std::list<Recurso>eddpractica1::getRecurso(){
	return cr.linealizar();
}

std::list<Servicio>eddpractica1::getServicio(){
	std::list<Servicio> temp = ps.linealizar();
	NodoServicio* t = ps.primero;
	free(t);
	ps.primero = NULL;
	return temp;
}

std::string eddpractica1::crearServicioUsuario(std::string userx){
	Servicio service;
	std::string cadena = userx;
    std::string delim = ".";std::string token;
    std::string identificador;
    std::string dominio;
    std::string contenido;
	while(token != cadena){
  		token = cadena.substr(0,cadena.find_first_of("."));
  		cadena = cadena.substr(cadena.find_first_of(".") + 1);
  		identificador = token.c_str();
  		break;
	}
	int uno = identificador.length() + 1;
	int dos = userx.length();
	bool encontrado = false;
	NodoUsuario* temp = ul.primero;
	NodoRecurso* tempr = cr.primero;
	std::string nombre = "";
	if(tempr != 0){
		if(temp != 0){
			do{
       			if(temp -> datos().identificador==userx){
        	   		encontrado = true;
        	   		nombre = temp -> datos().nombre;
       			}
       			temp = temp -> SiguienteUsuario();
    		}while(temp!= ul.primero);
			if(encontrado == true){
				dominio = userx.substr(uno,dos);

				NodoRecurso* tempr1 = cr.primero;
				do{
					if(tempr1 -> datos().dominio == dominio){
						contenido = tempr1 -> datos().contenido;
					}
					tempr1 = tempr1 -> SiguienteRecurso();
				}while(tempr1 != cr.primero);

				std::string random = getRandomChar();
				service.identificador_sesion = random;
				service.identificador_usuario = identificador;
				ps.insertarServicio(service);
				return "{"
					"recurso: {"
					"id_sesion = "+random+","
					"usuario = "+nombre+","
					"dominio = "+dominio+","
					"contenido = "+contenido+","
					"}"
				"}";
			}else{
				return "ERROR: identificador no encontrado";
			}
		}else{
			return "ERROR: lista vacia";
		}
	}else{
		return "ERROR: cola vacia";
	}
}