cmake_minimum_required(VERSION 2.6)

project (eddproyecto1 CXX)

set(EDDPROYECTO1_HEADERS eddproyecto1.h nodo.h)

set(PROJECT_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/src)
set(EDDPROYECTO1_CODEGEN_DIR "${PROJECT_BINARY_DIR}/codegen")

PREPEND(EDDPROYECTO1_HEADERS_PATHS ${PROJECT_SOURCE_DIR} ${EDDPROYECTO1_HEADERS})

CODEGEN_FILES(EDDPROYECTO1_CODEGEN_SOURCES ${EDDPROYECTO1_CODEGEN_DIR} ${EDDPROYECTO1_HEADERS})

add_custom_command(OUTPUT ${EDDPROYECTO1_CODEGEN_SOURCES}
    COMMAND ${NGREST_BIN_PATH}ngrestcg -i "${PROJECT_SOURCE_DIR}" -o ${EDDPROYECTO1_CODEGEN_DIR} -t service ${EDDPROYECTO1_HEADERS}
    DEPENDS ${EDDPROYECTO1_HEADERS_PATHS}
)

file(GLOB EDDPROYECTO1_SOURCES ${PROJECT_SOURCE_DIR}/*.cpp)

list(APPEND EDDPROYECTO1_SOURCES ${EDDPROYECTO1_CODEGEN_SOURCES})

include_directories(${PROJECT_SOURCE_DIR} $ENV{NGREST_EXT_INCLUDES})

add_library(eddproyecto1 MODULE ${EDDPROYECTO1_SOURCES})

set_target_properties(eddproyecto1 PROPERTIES PREFIX "")
set_target_properties(eddproyecto1 PROPERTIES
    LIBRARY_OUTPUT_DIRECTORY "${PROJECT_SERVICES_DIR}"
)

target_link_libraries(eddproyecto1 ngrestutils ngrestcommon ngrestjson ngrestengine $ENV{NGREST_EXT_LIBS})
