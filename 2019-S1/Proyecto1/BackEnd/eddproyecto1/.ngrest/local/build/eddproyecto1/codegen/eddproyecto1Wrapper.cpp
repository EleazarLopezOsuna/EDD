// This file generated by ngrestcg
// For more information, please visit: https://github.com/loentar/ngrest
// DO NOT EDIT. ANY CHANGES WILL BE LOST

#include <ngrest/utils/Log.h>
#include <ngrest/utils/fromcstring.h>
#include <ngrest/utils/tostring.h>
#include <ngrest/utils/Exception.h>
#include <ngrest/common/ObjectModel.h>
#include <ngrest/common/ObjectModelUtils.h>
#include <ngrest/common/Message.h>
#include <ngrest/common/HttpMethod.h>
#include <ngrest/common/Service.h>
#include <ngrest/engine/ServiceDescription.h>
#include "eddproyecto1Wrapper.h"





eddproyecto1Wrapper::eddproyecto1Wrapper():
    service(new eddproyecto1())
{
}

eddproyecto1Wrapper::~eddproyecto1Wrapper()
{
    delete service;
}


::ngrest::Service* eddproyecto1Wrapper::getServiceImpl()
{
    return service;
}

void eddproyecto1Wrapper::invoke(const ::ngrest::OperationDescription* operation, ::ngrest::MessageContext* context)
{
    if (operation->name == "crearCatedratico") {   //  **************** crearCatedratico *****************

        /// std::string crearCatedratico(const Catedratico& cate);

/// ######### deserialize request ###########
        NGREST_ASSERT(context->request->node, "Request expected for eddproyecto1/crearCatedratico");
        NGREST_ASSERT_PARAM(context->request->node->type == ::ngrest::NodeType::Object);

        const ::ngrest::Object* request = static_cast<const ::ngrest::Object*>(context->request->node);

        ::Catedratico cate;

        const ::ngrest::NamedNode* cateObj = ::ngrest::ObjectModelUtils::getNamedChild(request, "cate", ::ngrest::NodeType::Object);
        ::CatedraticoSerializer::deserialize(cateObj->node, cate);
/// ######### deserialize request end ###########

        const std::string& result = service->crearCatedratico(cate);

/// ######### serialize response ###########

        ::ngrest::Object* responseNode = context->pool->alloc< ::ngrest::Object>();
        ::ngrest::NamedNode* resultNode = context->pool->alloc< ::ngrest::NamedNode>("result");
        responseNode->firstChild = resultNode;

        resultNode->node = context->pool->alloc< ::ngrest::Value>(::ngrest::ValueType::String, result.c_str());

        context->response->node = responseNode;
/// ######### serialize response end ###########

        context->callback->success();
    } else if (operation->name == "recorrerCatedratico") {   //  **************** recorrerCatedratico *****************

        /// std::string recorrerCatedratico();

        const std::string& result = service->recorrerCatedratico();

/// ######### serialize response ###########

        ::ngrest::Object* responseNode = context->pool->alloc< ::ngrest::Object>();
        ::ngrest::NamedNode* resultNode = context->pool->alloc< ::ngrest::NamedNode>("result");
        responseNode->firstChild = resultNode;

        resultNode->node = context->pool->alloc< ::ngrest::Value>(::ngrest::ValueType::String, result.c_str());

        context->response->node = responseNode;
/// ######### serialize response end ###########

        context->callback->success();
    } else if (operation->name == "crearCurso") {   //  **************** crearCurso *****************

        /// std::string crearCurso(const Curso& cur);

/// ######### deserialize request ###########
        NGREST_ASSERT(context->request->node, "Request expected for eddproyecto1/crearCurso");
        NGREST_ASSERT_PARAM(context->request->node->type == ::ngrest::NodeType::Object);

        const ::ngrest::Object* request = static_cast<const ::ngrest::Object*>(context->request->node);

        ::Curso cur;

        const ::ngrest::NamedNode* curObj = ::ngrest::ObjectModelUtils::getNamedChild(request, "cur", ::ngrest::NodeType::Object);
        ::CursoSerializer::deserialize(curObj->node, cur);
/// ######### deserialize request end ###########

        const std::string& result = service->crearCurso(cur);

/// ######### serialize response ###########

        ::ngrest::Object* responseNode = context->pool->alloc< ::ngrest::Object>();
        ::ngrest::NamedNode* resultNode = context->pool->alloc< ::ngrest::NamedNode>("result");
        responseNode->firstChild = resultNode;

        resultNode->node = context->pool->alloc< ::ngrest::Value>(::ngrest::ValueType::String, result.c_str());

        context->response->node = responseNode;
/// ######### serialize response end ###########

        context->callback->success();
    } else if (operation->name == "recorrerCurso") {   //  **************** recorrerCurso *****************

        /// std::string recorrerCurso();

        const std::string& result = service->recorrerCurso();

/// ######### serialize response ###########

        ::ngrest::Object* responseNode = context->pool->alloc< ::ngrest::Object>();
        ::ngrest::NamedNode* resultNode = context->pool->alloc< ::ngrest::NamedNode>("result");
        responseNode->firstChild = resultNode;

        resultNode->node = context->pool->alloc< ::ngrest::Value>(::ngrest::ValueType::String, result.c_str());

        context->response->node = responseNode;
/// ######### serialize response end ###########

        context->callback->success();
    } else if (operation->name == "getCursos") {   //  **************** getCursos *****************

        /// std::string getCursos();

        const std::string& result = service->getCursos();

/// ######### serialize response ###########

        ::ngrest::Object* responseNode = context->pool->alloc< ::ngrest::Object>();
        ::ngrest::NamedNode* resultNode = context->pool->alloc< ::ngrest::NamedNode>("result");
        responseNode->firstChild = resultNode;

        resultNode->node = context->pool->alloc< ::ngrest::Value>(::ngrest::ValueType::String, result.c_str());

        context->response->node = responseNode;
/// ######### serialize response end ###########

        context->callback->success();
    } else if (operation->name == "crearDia") {   //  **************** crearDia *****************

        /// std::string crearDia(const Dia& dia);

/// ######### deserialize request ###########
        NGREST_ASSERT(context->request->node, "Request expected for eddproyecto1/crearDia");
        NGREST_ASSERT_PARAM(context->request->node->type == ::ngrest::NodeType::Object);

        const ::ngrest::Object* request = static_cast<const ::ngrest::Object*>(context->request->node);

        ::Dia dia;

        const ::ngrest::NamedNode* diaObj = ::ngrest::ObjectModelUtils::getNamedChild(request, "dia", ::ngrest::NodeType::Object);
        ::DiaSerializer::deserialize(diaObj->node, dia);
/// ######### deserialize request end ###########

        const std::string& result = service->crearDia(dia);

/// ######### serialize response ###########

        ::ngrest::Object* responseNode = context->pool->alloc< ::ngrest::Object>();
        ::ngrest::NamedNode* resultNode = context->pool->alloc< ::ngrest::NamedNode>("result");
        responseNode->firstChild = resultNode;

        resultNode->node = context->pool->alloc< ::ngrest::Value>(::ngrest::ValueType::String, result.c_str());

        context->response->node = responseNode;
/// ######### serialize response end ###########

        context->callback->success();
    } else if (operation->name == "crearSalon") {   //  **************** crearSalon *****************

        /// std::string crearSalon(const Salon& sal);

/// ######### deserialize request ###########
        NGREST_ASSERT(context->request->node, "Request expected for eddproyecto1/crearSalon");
        NGREST_ASSERT_PARAM(context->request->node->type == ::ngrest::NodeType::Object);

        const ::ngrest::Object* request = static_cast<const ::ngrest::Object*>(context->request->node);

        ::Salon sal;

        const ::ngrest::NamedNode* salObj = ::ngrest::ObjectModelUtils::getNamedChild(request, "sal", ::ngrest::NodeType::Object);
        ::SalonSerializer::deserialize(salObj->node, sal);
/// ######### deserialize request end ###########

        const std::string& result = service->crearSalon(sal);

/// ######### serialize response ###########

        ::ngrest::Object* responseNode = context->pool->alloc< ::ngrest::Object>();
        ::ngrest::NamedNode* resultNode = context->pool->alloc< ::ngrest::NamedNode>("result");
        responseNode->firstChild = resultNode;

        resultNode->node = context->pool->alloc< ::ngrest::Value>(::ngrest::ValueType::String, result.c_str());

        context->response->node = responseNode;
/// ######### serialize response end ###########

        context->callback->success();
    } else if (operation->name == "obtenerSalones") {   //  **************** obtenerSalones *****************

        /// std::list<std::string> obtenerSalones(const std::string edificio);

/// ######### deserialize request ###########
        NGREST_ASSERT(context->request->node, "Request expected for eddproyecto1/obtenerSalones");
        NGREST_ASSERT_PARAM(context->request->node->type == ::ngrest::NodeType::Object);

        const ::ngrest::Object* request = static_cast<const ::ngrest::Object*>(context->request->node);

        std::string edificio;

        ::ngrest::ObjectModelUtils::getChildValue(request, "edificio", edificio);
/// ######### deserialize request end ###########

        const std::list<std::string>& result = service->obtenerSalones(edificio);

/// ######### serialize response ###########

        ::ngrest::Object* responseNode = context->pool->alloc< ::ngrest::Object>();
        ::ngrest::NamedNode* resultNode = context->pool->alloc< ::ngrest::NamedNode>("result");
        responseNode->firstChild = resultNode;

// count = 1
        ::ngrest::Array* resultArray = context->pool->alloc< ::ngrest::Array>();
        resultNode->node = resultArray;
        ::ngrest::LinkedNode* lastResultArrayItem = nullptr;
        for (const auto& it : result) {
            ::ngrest::LinkedNode* resultArrayItem = context->pool->alloc< ::ngrest::LinkedNode>();
            if (lastResultArrayItem == nullptr) {
                resultArray->firstChild = resultArrayItem;
            } else {
                lastResultArrayItem->nextSibling = resultArrayItem;
            }
            lastResultArrayItem = resultArrayItem;
        // SERIALIZE : std::string string
            resultArrayItem->node = context->pool->alloc< ::ngrest::Value>(::ngrest::ValueType::String, it.c_str());
        // END SERIALIZE: std::string string
        }

        context->response->node = responseNode;
/// ######### serialize response end ###########

        context->callback->success();
    } else if (operation->name == "crearHora") {   //  **************** crearHora *****************

        /// std::string crearHora(const Hora& hor);

/// ######### deserialize request ###########
        NGREST_ASSERT(context->request->node, "Request expected for eddproyecto1/crearHora");
        NGREST_ASSERT_PARAM(context->request->node->type == ::ngrest::NodeType::Object);

        const ::ngrest::Object* request = static_cast<const ::ngrest::Object*>(context->request->node);

        ::Hora hor;

        const ::ngrest::NamedNode* horObj = ::ngrest::ObjectModelUtils::getNamedChild(request, "hor", ::ngrest::NodeType::Object);
        ::HoraSerializer::deserialize(horObj->node, hor);
/// ######### deserialize request end ###########

        const std::string& result = service->crearHora(hor);

/// ######### serialize response ###########

        ::ngrest::Object* responseNode = context->pool->alloc< ::ngrest::Object>();
        ::ngrest::NamedNode* resultNode = context->pool->alloc< ::ngrest::NamedNode>("result");
        responseNode->firstChild = resultNode;

        resultNode->node = context->pool->alloc< ::ngrest::Value>(::ngrest::ValueType::String, result.c_str());

        context->response->node = responseNode;
/// ######### serialize response end ###########

        context->callback->success();
    } else if (operation->name == "validarLogin") {   //  **************** validarLogin *****************

        /// std::string validarLogin(std::string usuario, std::string password);

/// ######### deserialize request ###########
        NGREST_ASSERT(context->request->node, "Request expected for eddproyecto1/validarLogin");
        NGREST_ASSERT_PARAM(context->request->node->type == ::ngrest::NodeType::Object);

        const ::ngrest::Object* request = static_cast<const ::ngrest::Object*>(context->request->node);

        std::string usuario;
        std::string password;

        ::ngrest::ObjectModelUtils::getChildValue(request, "usuario", usuario);
        ::ngrest::ObjectModelUtils::getChildValue(request, "password", password);
/// ######### deserialize request end ###########

        const std::string& result = service->validarLogin(usuario, password);

/// ######### serialize response ###########

        ::ngrest::Object* responseNode = context->pool->alloc< ::ngrest::Object>();
        ::ngrest::NamedNode* resultNode = context->pool->alloc< ::ngrest::NamedNode>("result");
        responseNode->firstChild = resultNode;

        resultNode->node = context->pool->alloc< ::ngrest::Value>(::ngrest::ValueType::String, result.c_str());

        context->response->node = responseNode;
/// ######### serialize response end ###########

        context->callback->success();
    } else if (operation->name == "graficarMatriz") {   //  **************** graficarMatriz *****************

        /// std::string graficarMatriz();

        const std::string& result = service->graficarMatriz();

/// ######### serialize response ###########

        ::ngrest::Object* responseNode = context->pool->alloc< ::ngrest::Object>();
        ::ngrest::NamedNode* resultNode = context->pool->alloc< ::ngrest::NamedNode>("result");
        responseNode->firstChild = resultNode;

        resultNode->node = context->pool->alloc< ::ngrest::Value>(::ngrest::ValueType::String, result.c_str());

        context->response->node = responseNode;
/// ######### serialize response end ###########

        context->callback->success();
    } else if (operation->name == "crearAsignacion") {   //  **************** crearAsignacion *****************

        /// std::string crearAsignacion(const Asignacion& ass);

/// ######### deserialize request ###########
        NGREST_ASSERT(context->request->node, "Request expected for eddproyecto1/crearAsignacion");
        NGREST_ASSERT_PARAM(context->request->node->type == ::ngrest::NodeType::Object);

        const ::ngrest::Object* request = static_cast<const ::ngrest::Object*>(context->request->node);

        ::Asignacion ass;

        const ::ngrest::NamedNode* assObj = ::ngrest::ObjectModelUtils::getNamedChild(request, "ass", ::ngrest::NodeType::Object);
        ::AsignacionSerializer::deserialize(assObj->node, ass);
/// ######### deserialize request end ###########

        const std::string& result = service->crearAsignacion(ass);

/// ######### serialize response ###########

        ::ngrest::Object* responseNode = context->pool->alloc< ::ngrest::Object>();
        ::ngrest::NamedNode* resultNode = context->pool->alloc< ::ngrest::NamedNode>("result");
        responseNode->firstChild = resultNode;

        resultNode->node = context->pool->alloc< ::ngrest::Value>(::ngrest::ValueType::String, result.c_str());

        context->response->node = responseNode;
/// ######### serialize response end ###########

        context->callback->success();
    } else if (operation->name == "asd") {   //  **************** asd *****************

        /// std::string asd(const std::string dia);

/// ######### deserialize request ###########
        NGREST_ASSERT(context->request->node, "Request expected for eddproyecto1/asd");
        NGREST_ASSERT_PARAM(context->request->node->type == ::ngrest::NodeType::Object);

        const ::ngrest::Object* request = static_cast<const ::ngrest::Object*>(context->request->node);

        std::string dia;

        ::ngrest::ObjectModelUtils::getChildValue(request, "dia", dia);
/// ######### deserialize request end ###########

        const std::string& result = service->asd(dia);

/// ######### serialize response ###########

        ::ngrest::Object* responseNode = context->pool->alloc< ::ngrest::Object>();
        ::ngrest::NamedNode* resultNode = context->pool->alloc< ::ngrest::NamedNode>("result");
        responseNode->firstChild = resultNode;

        resultNode->node = context->pool->alloc< ::ngrest::Value>(::ngrest::ValueType::String, result.c_str());

        context->response->node = responseNode;
/// ######### serialize response end ###########

        context->callback->success();
    } else {
        NGREST_THROW_ASSERT("No operation " + operation->name + " found in service eddproyecto1");
    }
}

const ::ngrest::ServiceDescription* eddproyecto1Wrapper::getDescription() const
{
    static ::ngrest::ServiceDescription description = {
        "eddproyecto1", // name
        "eddproyecto1", // location
        R"(Dummy description for the service)", // description
        R"(Some detailed description of the service)", // details
        {
            {
                "crearCatedratico",             // name
                "/crearCatedratico", // location
                static_cast<int>(::ngrest::HttpMethod::POST),
                "POST",
                false,
                R"()", // description
                R"()", // details
                {
                    {"cate", ::ngrest::ParameterDescription::Type::Object, false}
                },
                ::ngrest::ParameterDescription::Type::String, false
            },
            {
                "recorrerCatedratico",             // name
                "/recorrerCatedratico", // location
                static_cast<int>(::ngrest::HttpMethod::GET),
                "GET",
                false,
                R"()", // description
                R"()", // details
                {

                },
                ::ngrest::ParameterDescription::Type::String, false
            },
            {
                "crearCurso",             // name
                "/crearCurso", // location
                static_cast<int>(::ngrest::HttpMethod::POST),
                "POST",
                false,
                R"()", // description
                R"()", // details
                {
                    {"cur", ::ngrest::ParameterDescription::Type::Object, false}
                },
                ::ngrest::ParameterDescription::Type::String, false
            },
            {
                "recorrerCurso",             // name
                "/recorrerCurso", // location
                static_cast<int>(::ngrest::HttpMethod::POST),
                "POST",
                false,
                R"()", // description
                R"()", // details
                {

                },
                ::ngrest::ParameterDescription::Type::String, false
            },
            {
                "getCursos",             // name
                "/getCursos", // location
                static_cast<int>(::ngrest::HttpMethod::GET),
                "GET",
                false,
                R"()", // description
                R"()", // details
                {

                },
                ::ngrest::ParameterDescription::Type::String, false
            },
            {
                "crearDia",             // name
                "/crearDia", // location
                static_cast<int>(::ngrest::HttpMethod::POST),
                "POST",
                false,
                R"()", // description
                R"()", // details
                {
                    {"dia", ::ngrest::ParameterDescription::Type::Object, false}
                },
                ::ngrest::ParameterDescription::Type::String, false
            },
            {
                "crearSalon",             // name
                "/crearSalon", // location
                static_cast<int>(::ngrest::HttpMethod::POST),
                "POST",
                false,
                R"()", // description
                R"()", // details
                {
                    {"sal", ::ngrest::ParameterDescription::Type::Object, false}
                },
                ::ngrest::ParameterDescription::Type::String, false
            },
            {
                "obtenerSalones",             // name
                "/obtenerSalones", // location
                static_cast<int>(::ngrest::HttpMethod::POST),
                "POST",
                false,
                R"()", // description
                R"()", // details
                {
                    {"edificio", ::ngrest::ParameterDescription::Type::String, false}
                },
                ::ngrest::ParameterDescription::Type::Array, false
            },
            {
                "crearHora",             // name
                "/crearHora", // location
                static_cast<int>(::ngrest::HttpMethod::POST),
                "POST",
                false,
                R"()", // description
                R"()", // details
                {
                    {"hor", ::ngrest::ParameterDescription::Type::Object, false}
                },
                ::ngrest::ParameterDescription::Type::String, false
            },
            {
                "validarLogin",             // name
                "/validarLogin", // location
                static_cast<int>(::ngrest::HttpMethod::POST),
                "POST",
                false,
                R"()", // description
                R"()", // details
                {
                    {"usuario", ::ngrest::ParameterDescription::Type::String, false},
                    {"password", ::ngrest::ParameterDescription::Type::String, false}
                },
                ::ngrest::ParameterDescription::Type::String, false
            },
            {
                "graficarMatriz",             // name
                "/graficarMatriz", // location
                static_cast<int>(::ngrest::HttpMethod::GET),
                "GET",
                false,
                R"()", // description
                R"()", // details
                {

                },
                ::ngrest::ParameterDescription::Type::String, false
            },
            {
                "crearAsignacion",             // name
                "/crearAsignacion", // location
                static_cast<int>(::ngrest::HttpMethod::POST),
                "POST",
                false,
                R"()", // description
                R"()", // details
                {
                    {"ass", ::ngrest::ParameterDescription::Type::Object, false}
                },
                ::ngrest::ParameterDescription::Type::String, false
            },
            {
                "asd",             // name
                "/graficarAsignacion", // location
                static_cast<int>(::ngrest::HttpMethod::POST),
                "POST",
                false,
                R"()", // description
                R"()", // details
                {
                    {"dia", ::ngrest::ParameterDescription::Type::String, false}
                },
                ::ngrest::ParameterDescription::Type::String, false
            }
        }
    };

    return &description;
}



